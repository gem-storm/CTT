{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p> the knowledge vault </p> <p>You've reached the website for Couleur Tweak Tips, a comprehensive aggregation of useful resources for enthusiasts looking to expand their toolchain of programs and adopt good practices to enhance the quality of life in daily computer use and video production.</p> <p>These resources have been created with two types of people in mind:</p> <ul> <li>Curious individuals who enjoy reading, doing, and learning.</li> <li>Those who prefer quickly configuring programs to adhere to recommended standards; some guides offer automated versions in the form of PowerShell scripts.</li> </ul> <p>This website has been meticulously curated over the years, it evolved from a crowded discord server</p> <p>This website evolved from a crowded discord server over the years and turned into a meticulously curated repository of useful knowledge.</p>  Video <ul> <li> Smoothie: Make your gameplay footage smooth</li> <li> OBS Studio: Optimal configuration for recording &amp; streaming </li> </ul> <p> </p>"},{"location":"alita/","title":"Alita","text":""},{"location":"alita/#_1","title":"Alita","text":"<p> <p></p> <p> read </p>"},{"location":"contact/","title":"Contact","text":"<ul> <li>Discord server: dsc.gg/CTT</li> <li>GitHub organization: /couleur-tweak-tips</li> <li> <p>Website: ctt.cx(1)</p> <ol> <li>It's source code is available here</li> </ol> </li> </ul>"},{"location":"contact/#couleur","title":"Couleur","text":"<ul> <li> Discord: <code>@couleur.</code> | 352830597778898944</li> <li> Telegram: @couleur</li> <li> Twitter: @couleurminemen</li> <li> GitHub: /couleurm</li> <li> E-mail: <code>'couleur{0}riseup.net' -f '@'</code> in PowerShell</li> <li> YouTube: @couleur &amp; @couleur2</li> <li> Mastodon: hachyderm.io/@coler</li> <li> Bluesky: couleur.bsky.social</li> </ul>"},{"location":"contributing/","title":"Contribution Guidelines","text":"<p>You can contact us about your idea:</p> <ul> <li> <p>Send your idea(1) in the CTT Discord's <code>#suggestions</code> forum or in DMs</p> <ol> <li>I what you're writing is beyond Discord's (2000, or 4000 w/ nitro) character limit make a Cryptpad page</li> </ol> </li> </ul> <p>Or do most of the work and </p> <ol> <li> <p>Forking <code>couleur-tweak-tips/CTT</code> on GitHub </p> </li> <li> <p>Contributing your fix/idea and opening a pull request</p> </li> </ol> <p>Doing this implies you respect the following:</p> <ul> <li>Have one specific subject per pull request: Having multiple things going on in one pull requests makes resolving modifying what is denied and keeping what's accepted challenging, stay concise and faithful to your pull request's name.</li> <li>Do not leave placeholder links to pages that do not exist like <code>[this](./placeholder/)</code></li> </ul>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#inspirations","title":"Inspirations","text":"<ul> <li> <p>ctrl, the original optimizations &amp; render discord which has been acquired(1) and turned into Hone in early 2021.</p> <ol> <li>To be honest with you I'm not even sure what exactly happened to it, \"acquired\" might not be the term, anyways the Hone server used to be ctrl.</li> </ol> </li> <li> <p>fr33thy &amp; capetlevrai for getting me into making zips of tweaks back in the day.</p> </li> <li>Chris Titus Tech &amp; PoshGUI for getting me into PowerShell</li> <li> <p>temp for original batch OptiFine patcher(1) &amp; revisions</p> <ol> <li>I've since made my own library for game patching in PowerShell, it's equivalent today is <code>Optimize-OptiFine</code></li> </ol> </li> <li> <p>dark theme color palette heavily inspired from pmydown-extensions docs, thank you facelessuser \ud83e\udd70</p> </li> </ul>"},{"location":"credits/#credits","title":"Credits","text":"<ul> <li>teo: AMD (AMF) OBS settings</li> <li>Ashank: Intel (QuickSync) OBS settings</li> <li>zazk: Apex settings</li> <li>pepay: lightmap/overlay</li> <li>tellinq: obs themes &amp; cheatbreaker.net</li> <li>atzur: reenc &amp; git</li> <li>vladaad: ffmpeg batch scripts, git and very clever dissing of diagonal people</li> </ul> <ul> <li> <p>aetopia, chalice, tellinq, he3als(1), vladaad, atzur, frost (2), june and all of the staff for keeping the discord (somewhat) sane </p> <ol> <li></li> <li></li> </ol> </li> <li> <p>synthicy for designing/helping set up the old http://ctt.cx</p> </li> <li>squidfunk for mkdocs-material, the documentation framework you're reading right now.</li> <li>manu for  the banner art</li> <li>tekno for blur, mifi for losslesscut, vouk for voukoder, the list goes on for all programs mentioned on ctt</li> <li>amine  &amp; strafie </li> </ul>"},{"location":"misc/","title":"Miscellaneous resources","text":"<p>this page is my hoarder's refuge for unorganized list of interesting websites / repos</p> <ul> <li>https://cli.rs</li> <li>https://is-a.dev</li> <li>https://webcompat.com</li> <li>https://app.diagrams.net</li> </ul>"},{"location":"misc/filesharing/","title":"File sharing","text":"<p>In the context of sharing videos, the advantage over YouTube and other social media is that they don't compress your video (it's a file host, it doesn't alter it), so you don't need to upscale and wait. Perfect for sharing render tests / HQ versions of your montages</p> Website Size limit Time limit Terms Donate Quirk  odysee 16GB Forever ToS ? MKV container makes video playback fail on firefox fileditch.com 15GB Forever FAQ ? Pomf, Ran by individual catbox.moe 200MB Forever Legal Support Pomf, Ran by individual litterbox.catbox.moe 1GB &lt;=3 days Legal ^ Pomf, Ran by individual gigafile.nu 300GB &lt;=100 days jp en ? Japanese site, visit in english here 0x0.st 512MB see site see site see site Ran by individual gofile.io None see site ToS Premium No embed, video player swisstransfer.com 512MB see FAQ click \"see tos\" ? No embed wetransfer.com 2GB 7d ToS Get Pro No embed upload.disroot.org 2GB 30d About Donate No embed, video player send.portailpro.net 10GB 30d Mentions l\u00e9gales N/A Password / DL limit"},{"location":"misc/filesharing/#quirks-explained","title":"Quirks explained:","text":"<code>No embed</code> <p>The site does not provide hotlinks / direct download links, this means linking it in Telegram / Discord won't provide you with a video player</p> <code>Video player</code> <p>The site features a video player, allowing you to play the video without needing to download the entire file (e.g movies)</p> <code>Ran by individual</code> <p>The site is not owned by a company, most likely a nice person hosting this for free.</p> <code>Pomf</code> <p>Site is powered by Pomf file host</p>"},{"location":"misc/mkdocs/","title":"Mkdocs","text":""},{"location":"misc/mkdocs/#websites-using-mkdocs-material","title":"Websites using MkDocs Material","text":"<p>List of cool mkdocs material sites I found that use  Material for MkDocs</p> <ul> <li>PrivacyGuides.org</li> <li>Alternatives</li> <li>Hummingbot</li> <li>Tiagolo</li> <li>PyMdown Extensions</li> <li>Algorithms for Competitive Programming</li> <li>Funky Penguin's Geek Cookbook</li> <li>Hacking The Cloud</li> <li>Sample Factory</li> <li>Splink</li> <li>PSRule</li> <li>Chinese.. Mkdocs??</li> <li>MkDocs Macros Plugin</li> </ul>"},{"location":"misc/mkdocs/#documentation-frameworks","title":"Documentation frameworks","text":"<ul> <li>Starlight: documentation framework, built by the same people the Astro web framework</li> </ul>"},{"location":"misc/mkdocs/#cool-wording","title":"cool wording","text":"<ul> <li>https://docs.cryptpad.org/en/how_to_contribute.html</li> </ul>"},{"location":"misc/yt-dlp/","title":"yt-dlp","text":""},{"location":"misc/yt-dlp/#installation","title":"Installation","text":"WindowsLinuxmacOS <ul> <li>WinGet: <code>winget install -e --id yt-dlp.yt-dlp</code></li> <li>Scoop: <code>scoop install yt-dlp</code></li> <li>Chocolatey: <code>choco install yt-dlp</code></li> </ul> <ul> <li>Binary install (recommended):  <pre><code>sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\nsudo chmod a+rx /usr/local/bin/yt-dlp  # Make executable\n</code></pre> You can also use your distro's manager to install the package. Some common ones are listed below:</li> <li>Arch-based distros: <code>sudo pacman -Syu yt-dlp</code></li> <li>Ubuntu-based distros (copied from OBS download page): <pre><code>sudo add-apt-repository ppa:tomtomtom/yt-dlp    # Add ppa repo to apt\nsudo apt update                                 # Update package list\nsudo apt install yt-dlp                         # Install yt-dlp      \n</code></pre></li> </ul> <p>Homebrew: <code>brew install yt-dlp</code></p>"},{"location":"misc/yt-dlp/#usage","title":"Usage","text":"<p>Get your desired Youtube video or playlist you want to rip audio from, and then execute</p> <p><code>yt-dlp -f 251 -x [playlist or video]</code></p> <p>Where instead of the brackets, you insert your link. Here is a breakdown of the options:</p> <ul> <li><code>-f 251</code> selects the 251 option, which is the Opus codec for Youtube</li> <li><code>-x</code> specifies to only extract the audio from the link, not the video</li> </ul> <p>Itunes</p> <p>If you are planning on importing audio to your Iphone through Itunes, \"Opus\" is not supported. You must convert the file into mp3 or AAC for it to be imported correctly.</p>"},{"location":"software/","title":"Programs","text":"<p>this is veryyy far from being finished, got 100+ programs noted \ud83d\udc41\ud83d\udc41</p>"},{"location":"software/scoop/","title":"Scoop","text":"<p>A command-line program installer for Windows</p> <ul> <li>unlike Chocolatey it does not require you to run it as admin.</li> <li>unlike Winget you can install your own programs</li> <li>All apps are contained in <code>%USERPROFILE%\\Scoop</code> folder (per default, I recommend installing on a non-windows drive)</li> <li>All software you install are in a portable factor (except the ones that end in -np, non portable)</li> </ul> <p>Installing it is as easy as pasting this in PowerShell: <pre><code>irm get.scoop.sh | iex\n</code></pre> This makes a request to load a link which redirects to the latest version of Scoop's installation script hosted on GitHub and <code>| iex</code> executes it. </p> <p>You're free to save the file on your disk and run it normally.</p>"},{"location":"software/scoop/#git-based-manifests","title":"Git-based manifests","text":"<p>Each manifest contains information to download and install the latest version of a program, it's stored as a JSON file in Git repositories (called \"buckets\") and you can look through them on Scoop's website</p> <p>It's an open standard, which means you can make your own buckets, e.g to add mine:</p>"},{"location":"software/scoop/#youll-need-git-to-clone-the-repo-and-pull-new-updates","title":"(you'll need git to clone the repo and pull new updates)","text":"<p><pre><code>scoop install git\n</code></pre> \"utils\" is the name of how it's gonna be called on your computer <pre><code>scoop bucket add utils https://github.com/couleur-tweak-tips/utils\n</code></pre> If you want to be sure you install from the right bucket and avoid duplicates is to specify the bucket name like so: <pre><code>scoop install utils/utvideo\n</code></pre></p> <p><code>scoop update</code> will <code>git pull</code> through all bucket and log you the changes</p> <p><code>scoop update &lt;app&gt; &lt;app2&gt;</code> will update specified app(s), and <code>scoop update *</code> will check for every app</p>"},{"location":"software/scoop/#auto-updating-apps","title":"Auto-updating apps","text":"<p>The following apps auto-update and mess with Scoop's update system:</p> <ul> <li>All chromium-based apps &amp; browsers<ul> <li>Discord</li> <li>Visual Studio Code</li> </ul> </li> <li>Heroic Games Launcher</li> <li>Telegram (not chromium but it also has auto updates)</li> </ul> <p>You can use <code>scoop hold &lt;app&gt;</code> to \"hold an app to disable updates\"</p>"},{"location":"software/visual-studio-ides/","title":"Microsoft Visual Studio IDEs","text":"<p>There are three types of IDEs:</p> <ul> <li> Visual Studio Code:<ul> <li>Partly open-source</li> <li>Most popular IDE</li> </ul> </li> <li> <p> VS Codium: </p> <ul> <li>Unofficial FOSS fork with telemetry removed</li> <li>supports extensions, though it uses a different store</li> </ul> </li> <li> <p> Visual Studio: Specialized in C/C++/C# programming and debugging</p> <ul> <li>Community edition is free</li> <li>See older versions here</li> </ul> </li> </ul>"},{"location":"software/windows-terminal/","title":"Windows Terminal","text":"<ul> <li> License: MIT </li> </ul> <p>Modern version of the Windows command prompt / console host (conhost.exe).</p> <ul> <li>Tabs</li> <li>Quake mode</li> </ul> <p>This is especially useful for people that are experimenting with scripts/batchfiles and end up with a bunch of command prompt windows scattered around.</p>"},{"location":"software/windows-terminal/#download","title":"Download","text":"<ul> <li> microsoft/terminal (get the .msixbundle for an installer)</li> <li> Scoop: <code>scoop install extras/windows-terminal</code></li> <li> Winget: <code>winget install Microsoft.WindowsTerminal</code></li> </ul>"},{"location":"software/winget/","title":"Winget","text":"<p>Microsoft' command-line package manager for Windows</p> <p>I don't use it much so I'll just recommend you reading the MS docs</p>"},{"location":"software/winget/#wingetapp","title":"winget.app","text":"<p>This noob-friendly lets you pick software to install and builds up a command for you to simply paste in cmd.</p>"},{"location":"software/winget/#repos","title":"Repos:","text":"<ul> <li>winget CLI tool (License: MIT)</li> <li>winget packages (manifests) you need to drill down in /manifests/, here's an example</li> </ul> <p>PR if you have relevant knowledge to add here \ud83d\udc4d</p>"},{"location":"video/","title":"Introduction","text":"<p>This category is dedicated to document optimal configurations of programs for creating video content (optionally with high quality motion blur) and help you forge your own personal production workflow.</p>"},{"location":"video/#definitions","title":"Definitions","text":""},{"location":"video/#frame-blending","title":"Frame blending","text":"<p>The most common, it is without (unlike other methods like RSMB) any smearing of HUDs or general artifacting. Commonly this is done from a very high FPS (e.g. 540) down to a common FPS, i.e. 60 or 30.</p> <p>In general, the higher the input FPS, the smoother the final output would be, due to more blur frames making the blur look more seamless. Blur frames are how many frames are blended together, so <code>blur frames = input fps / output fps</code>.</p> <p>Video editors such as Vegas Pro and Adobe Premiere Pro have these features built-in. However, we recommend using seperate programs such as Smoothie first to pre-render the videos, therefore you don't have any lag in your video editor as well as having much more customisation.</p>"},{"location":"video/#interpolation","title":"Interpolation","text":"<p>Video interpolation is a video processing technique that creates new frames between existing ones, effectively increasing the video's frames per second (FPS) using algorithms or AI.</p> <p>RIFE and the SVP algorithm are commonly implemented into frame blending applications to interpolate.</p> <p>It generates frames from the data it has, and the higher the input FPS, the smaller the window between the two points are, which means more FPS the better.</p>"},{"location":"video/#video-encoding-and-decoding","title":"Video encoding and decoding","text":"<p>Video encoding is the process of converting one format (e.g. the raw visual data captured during recording) into a digital codec, with decoding converting videos into a format that can be displayed and viewed on a screen.</p> <p>A video codec is software or hardware that compresses and decompresses digital video to make file sizes smaller and make storage and distribution of videos easier.</p>"},{"location":"video/codecguide/","title":"Choose a suitable codec","text":"<p>When modifying videos(1), you are re-encoding your video, which often gets you greeted with an overwhelming amount of formats, codecs and a plethora configuration options\u00b9\u00b2.</p> <ol> <li>This means using (up)scale scripts, Smoothie, or exporting a NLE project to a video file, this does not concern LosslessCut.</li> </ol> <p>Think about encoded video data like a tightly-packed suitcase , you need to unpack it into raw data in order to change anything(1) in it , and then re-encode this new data into a codec again.</p> <ol> <li>Not necessarily for particular scenarios: tools like LosslessCut can make cuts every I-frame which is where the compression resets and does not need to re-encode the whole video.</li> </ol> <p>The choice depends on your hardware (do you own an NVIDIA GPU?), what you're uploading to (is it compatible YouTube, Twitter?),  how much quality you're ready to lose (lossless means no compression artifacts) and long you want to wait (can you let your PC render overnight?)</p> <p>Each codec has it's own pros and cons:</p> Features H.264 / AVC H.265 / HEVC AV1 UTVideo Fast at encoding<sup>1</sup>  Only fast when encoding a compatible GPU Filesize/Visual fidelity ratio<sup>2</sup> Worst out the bunch Lossless,makes huge files Compatibility<sup>3</sup>  Works in some video players  AFAIK Only recent Davinci Resolve versions support importing it You may need to install it Decoding speed<sup>4</sup> Worst out the bunch  It's only got full fat I-frames, resulting in super fast decoding"},{"location":"video/codecguide/#hwenc","title":"Hardware-accelerated encoding","text":"<p>You might've also noticed <code>NVENC</code>, <code>AMF</code> and <code>QuickSync</code> being mentioned after H.264, H.265 and AV1, this means the encoding is done on your GPU / iGPU instead of your CPU, this comes with pros/cons:   Faster encoding</p> <p> Much lower load on the CPU (especially useful when recording while you are playing a game)</p> <p> Worse filesize / visual fidelity ratio than CPU counterpart</p> <p>Note that AV1 Encoding is only available on last-gen cards</p>  Should I get an RTX 4000 card for it's AV1 encoder? <p>Only if you specifically have a use in mind for archiving or workflows that works best in AV1</p> <p> Definitely a step up in visual fidelity for band-with limited scenarios (streaming)</p> <p> Most video editors don't support importing AV1 footage yet (Voukoder does support exporting with it with software and hardware encoding)</p> <p> No, you won't have better \"quality\" when recording videos, H264 CQP0 exists if you want lossless quality</p>"},{"location":"video/codecguide/#rate-controls","title":"Rate controls","text":"<p>Unless you are recording lossless (HUGE files), you need a way to constrain the video's bandwith</p> <code>CBR</code>: Constant bit rate <p>Most used for streaming nowadays</p> <code>CRF</code> / <code>CQP</code>: Constrained rate factor / Constant quantizer <p>The new prefered rate control for recording to disk, as it adapts to the \"bandwith-hungryness\" of the content, e.g standing still in front a wall in a video-game will write way less data than when you're spinning and doing a bunch of 360s.</p> <p>It's some complex math stuff </p>"},{"location":"video/codecguide/#couleurs","title":"Couleur's routine &amp; use of codecs","text":"<p>Recording w/ OBS: <code>H.264 NVENC</code> to encode as fast(1) as possible</p> <ol> <li>Even super fast encoding settings can be lossless, NVENC's <code>P1</code> Preset which OBS calls \"Low quality\" is directed at people streaming with a constrained CBR</li> </ol> <p>Pre-rendering w/ Smoothie:  <code>UTVideo</code> Decodes as fast as possible for video editing</p> <p>Exporting w/ Voukoder: <code>H265 NVENC</code> + Upscaling(1) Whatever video editor which supports Voukoder this is a great middleground</p> <ol> <li>This mentions one of my Voukoder presets that can be installed with my installation script that have an additional filter which (up)scales to 4K and encode on the fly without needing for a second encode with a batch script</li> </ol>"},{"location":"video/codecguide/#encodingpresets","title":"Voukoder &amp; Smoothie encoding presets","text":"<ul> <li>Smoothie: Find about them in <code>target/encodingpresets.ini</code></li> </ul> <p>These directly translate to FFmpeg arguments, also add the <code>4K</code> macro to add upscaling arguments </p> <ul> <li>Voukoder: My unofficial <code>Install-Voukoder</code> function</li> </ul> <p>Tries to stay faithful to the aforementioned settings, also includes <code>+ Upscale</code> editions</p> <ol> <li> <p>General rule of thumb of how long you're expected to wait while it's encoding. Note that with a touch of configuration the same codec can be lightning speed and excruciatingly slow\u00a0\u21a9</p> </li> <li> <p>Most important metric when streaming since you have a very limited bandwith budget unlike recording on disk/SSD\u00a0\u21a9</p> </li> <li> <p>Mostly concerns being able to import videos in your video editor, uploading to Twitter and being able to embed Discord (aka to play back directly without the need to download). YouTube supports pretty much everything since it re-encodes after.\u00a0\u21a9</p> </li> <li> <p>Important to consider while video editing so videos play back fast in your preview\u00a0\u21a9</p> </li> </ol>"},{"location":"video/sendto/","title":"Send To","text":"<p>Send To is a feature in Windows' right-click (context) menu that can be launch scripts with the file(s) you selected</p> <p></p>"},{"location":"video/sendto/#opening-the-send-to-folder","title":"Opening the Send To folder","text":"<p>It can be opened by typing <code>shell:sendto</code> in the run dialog (Win+R)</p> <p></p> <p>Here you can make and remove shortcuts to scripts and folders</p> <p></p>"},{"location":"video/sendto/#script-arguments-behavior","title":"Script arguments behavior","text":"<p>Info</p> <p>Executable means be any of the following:</p> <ul> <li>A shortcut to an executable or batch file</li> <li>An executable or batchfile, literally</li> </ul> <p>Dragging file(s) on an executable, and doing Send To -&gt; that executable has the same behavior: </p> <p>That executable gets launched with each argument being the full file path of the file(s) selected</p> <pre><code>example.cmd \"D:\\vids\\clip1.mp4\" \"D:\\vids\\clip2.mp4\"\n</code></pre>"},{"location":"video/sendto/#program-compabitility","title":"Program compabitility","text":"<p>The following programs support passing multiple file paths at once :</p> <ul> <li>Smoothie: i've natively made it support this </li> <li>LosslessCut: in a \"batch mode\"</li> </ul> <p>These programs only support opening with one video at a time </p> <ul> <li>Avidemux: It can only open one video file at once</li> <li>FFmpeg: Each input media file needs to be separated with <code>-i</code></li> </ul>"},{"location":"video/sendto/#folder-behavior","title":"Folder behavior","text":"<p>You can also place shortcuts to folder if you want to be able to copy / move folder to specific places from any folder in the Explorer:</p> <ul> <li>Simply left clicking will copy the file</li> <li>SHIFT clicking it will move the file</li> </ul>"},{"location":"video/ffmpeg/","title":"FFmpeg &amp; LibAV: an introduction","text":"<p>FFmpeg is most known for being a tool for handling multimedia (notably Audio &amp; Video). It's a swiss army knife when used in scripts. </p> <p>It's backbones, LibAV, lets other program make use of it's wide capabilities (e.g Voukoder does).</p> <p>It can do any and all of these at once:</p> <ul> <li>Convert from a codec to another, or simply <code>copy</code> to transfer it without touching it(1) (<code>-c</code>)</li> <li>Cut videos (LosslessCut uses FFmpeg for that) (<code>-ss</code> <code>-to</code>)</li> <li>Add/remove/merge audio/video/subtitle tracks (e.g multiple <code>-i</code>/<code>-input</code>)</li> </ul> <p>And a lot, a lot of other useful stuff</p>"},{"location":"video/ffmpeg/#installation","title":"Installation","text":"WindowsLinux AutomaticManual <p>You can use the Scoop package manager to easily install it to PATH </p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force\nirm https://get.scoop.sh | iex\nscoop.cmd install ffmpeg\n</code></pre> <p>todo: explain this in text</p> <p>the link in description in question: https://www.gyan.dev/ffmpeg/builds</p> <p></p> <p>You can use your favorite manager</p> <p>todo: make content tabs for all package manager commands</p>"},{"location":"video/ffmpeg/#ff-tools","title":"ff-tools","text":"<p>There are three main \"fftools\":</p> <ul> <li><code>ffmpeg</code>: for handling audio, videos.. the swiss army knife</li> <li><code>ffplay</code>: a video player that makes use of ffmpeg's decoding abilities</li> <li><code>ffprobe</code>: probing tools to gather information on a video/audio file's formats and specifications</li> </ul>"},{"location":"video/ffmpeg/#scripts","title":"Scripts","text":"<p>This section contains scripts for you to use for specific tasks so you don't need (though we recommend) to learn how to use the CLI and FFmpeg</p>"},{"location":"video/ffmpeg/upscaling/","title":"Why bother upscaling for YouTube?","text":"<p>Scaling your video to twice it's resolution (e.g <code>1080p</code> <code>2160p</code> / 4K) tricks YouTube into giving your video more bitrate. This is only useful for YouTube, </p> <p>It won't make your video look any better than when you're viewing it back on VLC, it'll just looks less compressed/more faithful on YouTube.</p> <p>This should be done at the very last step of every project, right before uploading, there's only downsides to be editing 4K content that's been scaled.</p>"},{"location":"video/ffmpeg/upscaling/#installation","title":"Installation","text":"AutomaticManual <p>Running the following command will:</p> <ul> <li>Install FFmpeg with Scoop</li> <li>Save the upscaling script in the Send To folder</li> </ul> <p>Paste the following command in a PowerShell window, (it doesn' need to be as an Administrator):</p> Automatic upscaler installer<pre><code>iex(irm tl.ctt.cx); Get Upscaler\n</code></pre> <ol> <li> <p>Install FFmpeg</p> </li> <li> <p>Save this batch file as a .cmd file, it's recommended to save it in either:</p> <ul> <li>Your Send To folder</li> <li>Or saving it wherever and dragging the video file(s) you wish to use with it</li> </ul> </li> </ol> <p>Your browser might make it a text file e.g <code>.cmd.txt</code>, show file extensions in your if explorer if it still opens notepad when double clicking it</p> <p>Smartscreen will always warn you about the batch files you download online </p>"},{"location":"video/ffmpeg/upscaling/#comparison","title":"Comparison","text":"<p>Here are two videos, one was left as is, the other one stretched to 4K, watch it in fullscreen with the Settings -&gt; Quality option maxed out.</p> 1080p1080p stretched to 4K <p></p> <p></p>"},{"location":"video/ffmpeg/upscaling/#why-not-nle","title":"Why not just set the project scale to 4K before rendering?","text":"<p>VEGAS Pro (and probably other NLEs) uses the bicubic scaling filter which makes your video a bit blurry, using FFmpeg lets you make sure you're using the right filter</p> <p> Why not use Voukoder's zscale? __You ideally should use it __over the batchscript you can install in this guide, since it will export your project and upscale it all at once, which should take less time and lose less efficiency, more info @ &lt;#1022956596768288919&gt;</p>"},{"location":"video/obs/","title":"Index","text":""},{"location":"video/obs/#introduction","title":"Introduction","text":"<p>Open Broadcaster Software Studio is free and open-source software for live streaming and recording.</p>"},{"location":"video/obs/#high-fps-recording","title":"High FPS recording","text":"<p>A lot of us configure our encoder to record as high FPS as we get in-game(1) to then frame blend with Smoothie</p> <ol> <li>If you get about 600FPS it's recommended to record around 480FPS to accomodate for the variations and eventual drops</li> </ol>"},{"location":"video/obs/#installing-obs","title":"Installing OBS","text":"<p>You should the latest version of OBS from the official downloads page. This page provides multiple sources from which you can install it.</p>"},{"location":"video/obs/#other-documentation-sources","title":"Other documentation sources","text":"<p>See OBS' knowledgebase: https://obsproject.com/kb</p> <ul> <li>Launch (CLI) Parameters: https://obsproject.com/kb/launch-parameters</li> </ul>"},{"location":"video/obs/#initial-configuration","title":"Initial configuration","text":"Video Walkthrough <ol> <li>Click Cancel on the Auto-Configuration Wizard to skip it</li> <li>Open Settings  Video</li> <li>Change the Output (Scaled) Resolution to exactly match your Base (Canvas) Resolution</li> <li>Switch Common FPS Values  Fractional FPS Value and modify the numerator to change your desired output FPS</li> <li>Go to the Output tab, and change the Output Mode to Advanced<ul> <li>Recording Format: Use MPEG-4 (.mp4) for compatibility or Matroska Video (.mkv).</li> </ul> </li> <li>Go to the Audio tab, and under Global Audio Devices, configure your audio devices</li> <li>Click OK on the Settings window</li> <li>Adjust the Audio Mixer to your liking</li> <li>Add a Display Capture source (unless you're on Linux)</li> <li>At the top, go to Docks  Stats, then drag it to the side of the preview to dock it, then adjust the sizing how you'd like</li> </ol>"},{"location":"video/obs/#stats-dock","title":"Stats dock","text":"<p>The stats dock is used for monitoring if your OBS settings can keep up with your computer, as well as other statistics shown.</p> <p>The main two statistics to indicate lag are encoding lag and rendering lag. If one of these statistics are increasing when recording your game in movement, then you should adjust your OBS settings.</p>"},{"location":"video/obs/#replay-buffer","title":"Replay Buffer","text":"<p>Replay buffer is a feature in OBS that allows users to save only the last specified seconds of a recording to a video file on the press of a button or hotkey. It uses RAM as a temporary storage, similar to NVIDIA's Shadowplay.</p> <p>It's very useful for testing encoder settings (with lots of movement in the test) without making lots of useless video files, as well as easily clipping moments in gameplay or whatever else.</p> <p>You can configure it in the Replay Buffer tab in Output, and you can set hotkeys for it in Hotkeys after it has been enabled.</p>"},{"location":"video/obs/advanced/","title":"Advanced","text":"<p>This page lacks important information</p> <p>I'm not that knowledgeable regarding all the color formats, spaces and ranges, contributions welcome.</p> <ul> <li><code>Colour Format</code>: NV12 (8-bit, 4:2:0, 2 planes)</li> </ul> If you want super crisp colors you can try I444, normally NV2/I420 records color (chroma) planes at half the resolution of the light (luma) planes. Learn about more :Chrominance <ul> <li> <p><code>Colour Space</code>: sRGB</p> </li> <li> <p><code>Colour Range</code>: Limited</p> </li> </ul> Full tends to look a bit more saturated when converted around, which some people like."},{"location":"video/obs/audio/","title":"Audio","text":"<p>I'm content leaving audio codec / bitrate per default</p>"},{"location":"video/obs/audio/#configuring-multiple-audio-tracks","title":"Configuring multiple audio tracks","text":"<p>There's three types of audio to capture:</p> <ul> <li>Microphone / webcams: sound you produce by speaking</li> <li>Desktop audio: mix of all audio sources from apps</li> <li>Application audio capture [BETA]: Lets you have audio sources per program, which you can then </li> </ul>"},{"location":"video/obs/docks/","title":"Docks","text":"<p>OBS' user interface can be greatly customized depending on your use of it's Docks:</p> <ul> <li>in Blue: the View and Docks button mentioned throughout this article</li> <li>in Green: can be shown/hidden in View</li> <li>in Red: can be shown/hidden in Docks</li> </ul> <p></p>"},{"location":"video/obs/docks/#stats","title":"Stats","text":"<p>Displays useful statistics regarding your recording and/or streaming status, most notably (see above):</p> <ul> <li>Memory Usage</li> <li>Total data output for recording &amp; streaming</li> <li>Skipped/missed frames due to encoding/rendering lag</li> <li>Disk space available / Approximation of how long it'll take for the recording to fill up the disk</li> </ul> <p>There are ways to open stat docks</p> <ol> <li>There is one available in Docks that you can dock into your interface (like previously shown)</li> <li>There is another in View that you can enable in View which is not dockable in the window and stays a separate floating window</li> </ol>"},{"location":"video/obs/docks/#scenes","title":"Scenes","text":"<p>Scenes are collections of user-defined sources, to give you an idea they\u2019re typically used by streamers who switch from game source w/ facecam, full-screen facecam,and some \u00ab\u00a0starting stream soon / brb\u00a0\u00bb text </p> <p>If you only make use of a single source at a time (e.g recording games) you could remove the Scenes Selector and Scene Transitions for some UI headroom </p>"},{"location":"video/obs/docks/#managing-docks","title":"Managing Docks","text":"<p>Simply select Docks or View -&gt; Select/unselect which you want enabled</p>"},{"location":"video/obs/general/","title":"General","text":""},{"location":"video/obs/general/#themes","title":"Themes","text":"Yami (OBS 29+ default)Dark (old default, most known)GreySystem (Windows)"},{"location":"video/obs/hotkeys/","title":"Hotkeys","text":"<p>All the keybinds on this page are what I've set, OBS has no default keybinds</p> <p>If you put the same keybind on a start X and stop X / enable X and disable X it will work like a toggle.</p> <ul> <li><code>Enable Preview</code> &amp; <code>Disable Preview</code>: CTRL+ENTER</li> </ul> This may help with performance, I like to disable it after starting recording. <ul> <li><code>Reset Stats</code>: CTRL+SHIFT</li> </ul> very underrated, when alt-tabbing there's always a few frames that drop, I like to reset it so I can check if it's above 0, instead of trying to remember how much there was before."},{"location":"video/obs/hotkeys/#replay-buffer","title":"Replay Buffer","text":"<ul> <li><code>Save Replay</code>: None by default</li> </ul> If you want to save clips with the Replay Buffer without having to alt tab and click on the little  button next to Stop Replay Buffer"},{"location":"video/obs/install/","title":"Installation \u2197","text":""},{"location":"video/obs/install/#alternative-sources","title":"Alternative sources","text":"Windows Linux macOS <p>Get portable builds in their GitHub releases</p> <ul> <li>WinGet: <code>winget install -e --id OBSProject.OBSStudio</code></li> <li>Scoop: <code>scoop bucket add extras; scoop install extras/obs-studio</code></li> <li>Chocolatey: <code>choco install obs-studio -y</code></li> </ul> <p>See their instructions here</p> <ul> <li>Flathub: <code>flatpak install flathub com.obsproject.Studio</code></li> <li>Arch-based distros: <code>pacman -S obs-studio</code></li> <li>Ubuntu-based distros:   <pre><code>sudo add-apt-repository ppa:obsproject/obs-studio\nsudo apt update\nsudo apt install ffmpeg obs-studio\n</code></pre></li> </ul> <p>See for other distros</p> <ul> <li>Homebrew: <code>brew install --cask obs</code></li> </ul>"},{"location":"video/obs/output/","title":"Output","text":"<p>You're recommended to use the latest version of OBS(1), check by clicking Help in the window title bar -&gt; Check For Updates</p>  Recording  Streaming Replay buffer <p>The norm for streaming today is to use CBR rate control, which sends a set amount of data per second.</p> <p>Your encoder's speed preset will determine how well compressed your X Kbps will look.</p> <p>See their documentation regarding which bitrate you should use at what resolution:</p> <ul> <li> https://support.google.com/youtube/answer/2853702</li> <li> https://help.twitch.tv/s/article/broadcasting-guidelines</li> <li> https://help.kick.com/en/articles/7066931-how-to-stream-on-kick-com</li> </ul> <p>You can measure your upload speed on speedtest.net or librespeed.org, and your stability with Waveform's bufferbloat test</p>  (NVIDIA) NVENC (AMD) AMF image/svg+xml  (Intel) QSV <p>This section lacks settings</p> <p>If you have experience regarding streaming with NVENC please contribute regarding this, for now I recommend checking NVIDIA's article</p> <ul> <li> <p><code>Rate Control</code>: CBR</p> </li> <li> <p><code>Bitrate</code>: Depends on platform and upload bandwith</p> </li> </ul> See links above <ul> <li><code>Preset</code>: P7: Slowest (Best Quality)</li> </ul> That'll provide the most efficient encoding for the given bandwith <ul> <li><code>Multipass Mode</code>: Two Passes (Full Resolution)</li> </ul> These two settings considerably affect the encoding speed and efficiency, they've been recently introduced to OBS and I'm not that knowledgeable regarding them. <p></p> <p>I do not own an AMD, try copying the settings shown in this video and see how they turn out:</p> <p>Feel free to contribute knowledge regarding this.</p> <p></p> <p>The settings seen in the video: <pre><code>MaxNumRefFrames=4 BReferenceEnable=1 BPicturesPattern=1 MaxConsecutiveBPictures=1 HighMotionQualityBoostEnable=1\n</code></pre></p> <p>Note: there is also some documentation on their GitHub wiki:</p> <p>https://github.com/obsproject/obs-studio/wiki/AMF-HW-Encoder-Options-And-Information https://github.com/obsproject/obs-studio/wiki/AMF-Options</p> <p>Do you know good settings for streaming? Let us know!</p> <p>I'll just recommend this guide for now</p>"},{"location":"video/obs/output/#why","title":"Why?","text":"Because there are no benefits to stay on an older version (e.g 25.8.0) of OBS anymore (except if you need compatibility with specific things like old plugins) <ul> <li>High fps recording with multi-track audio got fixed</li> <li>Rumours of duplicated frames with high FPS recording in newer-than-25.0.8 versions have never resurged</li> <li>There's a bunch of new encoding settings that let you have better efficiency or performance.</li> </ul> <p>If you do have a reason to keep using an old version that hasn't been mentioned (except laziness or procrastination), let me know </p>"},{"location":"video/obs/output/#recording-settings","title":"Recording Settings","text":"<p><code>Recording format</code>: Fragmented MP4 (.mp4)</p> <p>I highly recommend switching from the default to the fragmented MP4, as it brings the advantages of recording in mkv whilst not having to remux mkv to mp4 for compatibility.</p> <ul> <li>In general, NVENC is faster than AMF, which is faster than QuickSync, which is faster than x264/5</li> </ul> <p>Regarding <code>CQP</code>, <code>CFR</code> rate controls: It's inverted compared to CBR, 0 is lossless and 51 is most compressed</p>"},{"location":"video/obs/output/#video-encoder-settings","title":"Video Encoder Settings","text":"(NVIDIA) NVENC (AMD) AMF image/svg+xml  (Intel) QSV <p>High FPS recording configuration</p> <p>If you want to record in 120+FPS you're advised to configure the following:</p> <ul> <li> <p><code>Preset</code>: P1 - P4(1)</p> <ol> <li>OBS describes low Presets as \"Lower Quality\" in the context of streaming with CBR in bandwith-limited scenarios, if used for recording it'll be much more performant to record at the cost of bigger filesizes.</li> </ol> </li> <li> <p><code>Multipass Mode</code>: Single pass</p> </li> </ul> <ul> <li><code>Rate Control</code>: CQP</li> </ul> Much more adaptative than CBR which will always spits out the same constant bitrate, unlike CQP which write way less data when  <ul> <li> <p><code>CQ Level</code>: 18</p> </li> <li> <p><code>Preset</code>: P7: Slowest (Best Quality)</p> </li> <li> <p><code>Multipass Mode</code>: Two Passes (Full Resolution)</p> </li> </ul> These two settings considerably affect the encoding speed and efficiency, they've been recently introduced to OBS and I'm not that knowledgeable regarding them. <ul> <li> <p><code>Encoder</code>: AMD AMF H.265</p> </li> <li> <p><code>Rate control</code>: CQP</p> </li> <li> <p><code>Keyframe interval</code>: 2</p> </li> </ul> Set this to 2 if you're not planning on recording in high FPS <ul> <li> <p><code>Rate value</code>: 16-20 (depends on game)</p> </li> <li> <p><code>Quality preset</code>: Quality</p> </li> <li> <p><code>CQ Level</code>: 20</p> </li> </ul> <p>Note: there is also some documentation on the OBS Studio's GitHub wiki:</p> <p>https://github.com/obsproject/obs-studio/wiki/AMF-HW-Encoder-Options-And-Information https://github.com/obsproject/obs-studio/wiki/AMF-Options</p> <p>These settings are intended for recording Minecraft at 30FPS to 60FPS on Intel chips from 2020 and older, however with newer Iris XE and Arc iGPUs, you can record at 120FPS with these settings.</p> <ul> <li><code>Target Usage</code>: TU7</li> </ul> In the OBS 30 update there were various quality profiles introduced for QuickSync. TU7 is  the best performing out of all the presets, with some sacrifices to visual quality. If you are running your game on a dedicated GPU and recording with QuickSync, you can use TU4 for better quality. <ul> <li><code>Profile</code>: High</li> </ul> With OBS 30 keep it at High, it's the best performing with the most compatibility. <ul> <li><code>Keyframe Interval</code>: 3</li> </ul> Leave to 0 (auto) for the best performance, doing this will set the keyframe interval to 3 on the latest OBS version... so 3 is the actual best keyframe interval for recording at 60fps <ul> <li><code>Rate Control</code>: ICQ</li> </ul> It's preferable to use ICQ for best efficiency, it will adapt the bitrate per frame. <ul> <li><code>ICQ Quality</code>: 16 or 23 or 30</li> </ul> From some light testing Ashank found that the best quality for the file size is 16 (On UHD graphics). However if you want to record at a higher frame rate, playing more GPU bound games, or if you are encountering frame drops, increase the value to 23 or above. Values of 30 or so still look acceptable, but the quality is noticably worse. You may use this video as reference for what TU7 and ICQ 30 looks like. Going above 30 looks objectively bad, if you are seriously struggling with recording with QSV at 30 ICQ, you should consider using a capture card, as no amount of optimization can improve your frames further. <ul> <li><code>Latency</code>normal</li> </ul> Set this to normal, as you aren't streaming. This setting is useful for getting the delay as low as possible during live streams but since this is a recording, you will not be needing it to be set lower than normal. <ul> <li><code>Max-B-frames</code>: 0</li> </ul> B-Frames are generally used as a compression method, which takes up a significant amount of CPU and GPU power when gaming. You may set this value to 3 for games with low motion (if you are using a dedicated GPU in tandem with QSV). However it is optimal to leave this at 0, as someone recording with QSV is likely to be using an iGPU which needs all the power it can get."},{"location":"video/obs/output/#in-obs","title":"In OBS","text":""},{"location":"video/obs/output/#description","title":"Description","text":"<p>Similar to NVIDIA Shadowplay, this captures using your recording settings and keeps in RAM only the last X seconds of what was captured and at any point you can press a hotkey to save it as a video file.</p> <p>It's an alternative to scrub through hour long recordings / stream VODs looking for important parts, each save will be separated per video file.</p>"},{"location":"video/obs/output/#replay-buffer-settings","title":"Replay Buffer Settings","text":"Enable Replay Buffer <p>This will grant you the Start Replay Buffer button in your Controls dock</p> <ul> <li>Maximum Replay Time: up to you</li> </ul> This is the amount of seconds you want to save each time, it's labelled \"Maximum\" because if you start the replay buffer and hit Save Replay hotkey before enough time elapses, it won't be X seconds long. <ul> <li>Maximum Memory: depends on multiple factors</li> </ul> This entirely depends on how large the filesize of your clips are gonna be, the biggest one I saved was 1.15GB, so I keep it at 2048MB."},{"location":"video/obs/output/#h264-avc-h265-hevc-or-av1","title":"H.264 (AVC), H.265 (HEVC) or AV1?","text":"<p>See the codec guide</p>"},{"location":"video/obs/sourcetypes/","title":"Source types","text":"WindowsLinux <p>There's a few alternatives sources for Linux, though none are as good as Game capture on Windows</p> <ul> <li>https://aur.archlinux.org/packages/obs-nvfbc-high-fps-git (read pinned comments)</li> <li>https://github.com/nowrep/obs-vkcapture (see #usage at the bottom of the page)</li> </ul> <p>Also see gpu-screen-recorder if you just want to record games in high FPS</p>"},{"location":"video/obs/sourcetypes/#game-capture","title":"Game Capture","text":"<p>Captures a windows' content, most preferable as it performs best</p>"},{"location":"video/obs/sourcetypes/#window-capture","title":"Window Capture","text":"<p>This can also capture the title bar, if game capture is not available / broken, use it instead</p>"},{"location":"video/obs/sourcetypes/#display-capture","title":"Display Capture","text":"<p>Capture what a monitor shows, least performant.</p>"},{"location":"video/obs/video/","title":"Difference between Base (Canvas) and Output (Scaled) resolutions","text":"<p>As canvas implies, it's the resolution of the preview pane where you place sources</p> <p>The output takes the base canvas and scales it to what </p>"},{"location":"video/obs/video/#when-using-a-different-resolution-is-worth-using","title":"When using a different resolution is worth using","text":"<p>If you're limited on bandwith / encoding efficiency you might consider scaling down, or the opposite on YouTube for extra bitrate (same principle as (up)scaling)</p> <p>For recording this won't grant you</p>"},{"location":"video/obs/video/#frame-rate","title":"Frame rate","text":"<p>All of us use Fractional FPS Value, and use  / 1"},{"location":"video/obs/linux/","title":"Linux OBS Configuration","text":"<p>On OBS for Linux, there's not much options by default for high FPS or otherwise low resource recording like Windows. This is due to inefficient capture methods:</p> <ul> <li>Screen Capture (XSHM): Generally can't record above 120 FPS without lag</li> <li>Window Capture (Xcomposite): Much more efficient, but still limited to ~540 FPS</li> <li>Pipewire Capture: Generally can't record above 60 FPS without lag</li> </ul> <p>If the default Window Capture (Xcomposite) works just fine for you, you can stop here. However, if you want more efficient capture methods, you will have to go with third-party plugins, which may or may not be worth it.</p>"},{"location":"video/obs/linux/#third-party-plugins","title":"Third-party plugins","text":"<ul> <li> NvFBC (<code>obs-nvfbc</code> patched for high FPS)<ul> <li>Requires NVIDIA, OBS 27 and X.Org</li> <li>Screen capture</li> </ul> </li> <li> OBS VkCapture (<code>obs-vkcapture</code>)<ul> <li>Game capture</li> </ul> </li> </ul>"},{"location":"video/obs/linux/nvfbc/","title":"NvFBC","text":"<p> Packaged for Arch Linux users</p> <p>If you cannot install from the AUR you're gonna have to look for alternatives / compile / install them yourself</p>"},{"location":"video/obs/linux/nvfbc/#information","title":"Information","text":"<p>For NVIDIA users, NvFBC is available with some driver patching. NvFBC is a feature like NVENC, except from that it captures your screen directly from the framebuffer very efficiently.</p> <p>Overall, this works very well for high FPS recording, and is on a par with Windows' default Display Capture source, if not better.</p> <p>However, unfortunately, this has some issues:</p> <ul> <li>The NvFBC plugin is currently incompatible with OBS 28+<ul> <li>Maybe this could be fixed in the future</li> </ul> </li> <li>You need to be on the proprietary NVIDIA drivers</li> <li>You need to use X.Org (not Wayland)<ul> <li>See this with <code>echo $XDG_SESSION_TYPE</code></li> </ul> </li> </ul>"},{"location":"video/obs/linux/nvfbc/#installation","title":"Installation","text":"<ol> <li>Install <code>nvidia-utils-nvlax</code> from the AUR, which will replace <code>nvidia-utils</code> with a patched version. It does 2 patches, all automatically:<ul> <li>NVENC patch: removes restriction on maximum number of simultaneous NVENC video encoding sessions imposed by Nvidia to consumer-grade GPUs</li> <li>NvFBC patch (required): allows to use NvFBC on consumer-grade GPUs</li> </ul> </li> <li>Install <code>downgrade</code> from the AUR</li> <li>Run <code>sudo downgrade --ala-only obs-studio</code>, install the latest version of OBS 27 (which is <code>27.2.4 2</code>)</li> <li>Install <code>obs-nvfbc-high-fps-git</code> from the AUR, which is the 'NvFBC Source' OBS plugin, patched for high FPS values</li> <li>Open OBS, and add the 'NvFBC Source'</li> <li>Configure the NvFBC source (test out settings), make the FPS the same as the OBS recording FPS</li> </ol>"},{"location":"video/obs/linux/nvfbc/#tips","title":"Tips","text":"<ul> <li>Enable Smooth FPS in Minecraft / capping your FPS, to leave some GPU usage headroom for OBS</li> <li>Toggle/disable compositing in your window manager/desktop environment</li> <li>You can use <code>teres</code> in the AUR to frame blend and interpolate</li> </ul>"},{"location":"video/obs/linux/nvfbc/#references","title":"References","text":"<ul> <li>Patched OBS NvFBC plugin</li> <li>Downgrade Pacman packages</li> <li>Patched <code>nvidia-utils</code></li> <li>OBS NvFBC plugin page</li> </ul>"},{"location":"video/obs/linux/obs-vkcapture/","title":"OBS VkCapture","text":"<p>TODO: https://github.com/nowrep/obs-vkcapture</p>"},{"location":"video/smoothie/","title":"Index","text":"Smoothie  <p>     add motion blur to videos, with granular configuration </p> <p> </p>"},{"location":"video/smoothie/#what-is-smoothie","title":"what is smoothie","text":"User facingDevelopper facing <p>Smoothie applies motion blur on video-game footage, it's got features similar to smart-resampling and RSMB.</p> <p>It acts as an all-in-one filter chain, you can individually toggle and configure each recipe component</p> <p>Cross-platform fork of blur, now rewritten in Rust.</p>"},{"location":"video/smoothie/#why-use-smoothie","title":"why use smoothie","text":"<p>Smoothie can be a better alternative to using the following programs / features ,</p> <p>They're available to opt-in/out at your discretion via the recipe:</p> <ul> <li> <p><code>[frame blending]</code>: VEGAS Pro's smart resampling / Premiere Pro's frame blending / FFmpeg Tmix filter</p> <p>It has magnitudes faster rendering than VEGAS Pro's smart resample, benchmark:</p> <ul> <li><code>Smoothie-RS</code>: 10.9 seconds</li> <li><code>VEGAS Pro 18.0 (build 284)</code>: 81 seconds</li> <li><code>FFmpeg tmix</code>: 19 seconds</li> </ul> Benchmark details <p>Frame blending a 1280x720, 990fps clip to 60fps (17 weights)</p> <p>Try it yourself with the raw clip</p> <p>They were encoded with the UTVideo codec</p> <p>Here's the relevant values I've set in the recipe: <pre><code>[frame blending]\nenabled: yes\nfps: 60\nintensity: 1.0\nweighting: vegas\n\n[output]\nenc args: -c:v utvideo\ncontainer: .MKV\n</code></pre></p> <p>FFmpeg arguments: <pre><code>-i grzy.mp4 -vf tmix=frames=17 -y -r 60 -c:v utvideo tmikx.mkv\n</code></pre></p> </li> <li> <p><code>[flowblur]</code>: RSMB, After Effects' CC Force Motion Blur</p> <ul> <li> <p><code>[artifact masking]</code>: Manually reverting RSMB where it smeared in a video editor with masking tools</p> Mask example <p>E.g for apex legends:</p> <p></p> </li> </ul> </li> <li> <p><code>[pre-interp]</code>: Flowframes / RIFE</p> </li> <li><code>[output]</code>: Transcoding with FFmpeg (<code>-vcodec &lt;...&gt;</code>)         * Upscaling to <code>4K</code></li> </ul>"},{"location":"video/smoothie/#how-to-use-smoothie","title":"how to use smoothie","text":"<p>You can configure your recipe by modifying <code>recipe.ini</code>, all settings are explained here</p> <p>It does not have an interface as it is a CLI tool but there are tons of wrappers so you never have to open a terminal and type anything yourself:</p> <ol> <li> <p>You can feed your videos directly via SendTo </p> </li> <li> <p>Or select your videos in a file picker dialog by running <code>Launch.cmd</code> </p> </li> </ol>"},{"location":"video/smoothie/cli/","title":"Command line arguments","text":"<code>-i/--input</code>: file path(s) <p>Specify input video file paths, use quotes if they contain spaces.</p> <code>-o/--output</code>: file path <p>Specify a single output video's path (do not use if multiple paths are supplied in <code>--input</code>, consider <code>--outdir</code>).</p> <code>-t/--tui</code>: bool <p>Makes sm behave like an app instead of a CLI tool (e.g pause before exiting on an error)</p> <code>--outdir</code>: folder path <p>Specify output directory for all queued files, overrides <code>[miscellaneous] global output folder:</code></p> <code>--peek</code>: int <p>Render out a single frame as an image file, useful when peeking to see what frame, let's say 200 will look like with a very slow recipe. This is passed to both <code>--start</code> and <code>--end</code> to VSPipe and does not mess up any temporal filters afaik.</p> <code>--vpy</code>: file path <p>Override the default vapoursynth python script to use (default: jamba.vpy)</p> <code>--stripaudio</code>: bool <p>No audio tracks will be added back when encoding the output video.</p> <code>--tonull</code>: bool <p>Makes VSPipe output to null (just adds <code>.</code> to arguments instead of piping Y4M to ffmpeg)</p> <code>--tompv</code>: bool <p>Redirects Y4M output to mpv, simpe implementation: it tries to grab it from PATH</p> <code>--json</code>: string <p>Trimming timecodes payload for suckless-cut, not fully ported from sm-py yet</p> <code>--trim</code>, <code>--padding</code>: bool <p>Trimming behavior, not fully ported from sm-py yet</p> <code>--rerun / -!!</code>: bool <p>Each time smoothie-rs runs, it dumps all arguments to <code>last_args.txt</code>, if smoothie crashes and you had given it a bunch of arguments that you lost, use this argument to grab them back, inspired from bash syntax e.g <code>sudo !!</code></p> <code>--encargs</code>: string <p>Overrides <code>[output] enc args:</code></p> <code>-v/--verbose</code>: bool <p>Prints verbose information, useful for debugging / curious folk</p> <code>-r/--recipe</code>: file path <p>Specify a recipe path, defaults to recipe.ini</p> <code>--override</code>: string <p>Override any recipe settings, eg --override \"flowblur;amount;40\", can be used multiple times.</p>"},{"location":"video/smoothie/frameserver/","title":"Exporting from an NLE to Smoothie","text":"<p>Not suitable for most people</p> <p>Because of bottlenecks I've yet to discover this</p> <p>also I forgot if I shipped smoothie-rs with AviSource, place this DLL in /bin/vapoursynth64/plugins/</p> <p>DebugMode FrameServer lets your video editor export projects as a virtual uncompressed AVI file which blur and Smoothie can use as input, effectively exporting indirectly to it.</p> <p>It supports most VEGAS versions and Premiere Pro.</p> <p> This comes with the niche convenience of not having to pre-render the clips you import</p> <p> It can be excruciatingly slow to render with it</p>"},{"location":"video/smoothie/frameserver/#download","title":"Download","text":"<p>Grab it at the Debugmode Homepage</p>"},{"location":"video/smoothie/frameserver/#installation","title":"Installation","text":""},{"location":"video/smoothie/frameserver/#1-accept-the-license","title":"1. Accept the license","text":""},{"location":"video/smoothie/frameserver/#2-select-the-video-editors-you-have","title":"2. Select the video editors you have","text":""},{"location":"video/smoothie/frameserver/#3-indicate-the-debugmode-frameserver-installation-directory-the-default-is-fine","title":"3. Indicate the Debugmode Frameserver installation directory, the default is fine:","text":"<p>Read the following steps carefully</p> <p>Spamming \"next\" will install the plugins in the wrong directories, you NEED to manually copy your video editor's installation folder path</p>"},{"location":"video/smoothie/frameserver/#4-indicate-the-vegas-pro-installation-directory-find-it-this-way","title":"4. Indicate the VEGAS Pro installation directory; find it this way:","text":"<p>Search VEGAS up in your search menu and right click it -&gt; <code>Open file location</code> </p> <p>You'll most likely end up in your start menu's program shortcuts, in that case right click the selected shortcut again and click <code>Open file location</code> again</p> <p>If it opens a folder containing <code>vegasXX0.exe</code>, copy the folder path(1) and paste this</p> <ol> <li>If not come ask for support on Discord</li> </ol> <p></p>"},{"location":"video/smoothie/frameserver/#5-indicate-the-adobe-premiere-pro-installation-directory","title":"5. Indicate the Adobe Premiere Pro installation directory:","text":"<p>Do the same aforementioned instructions but with Premiere Pro</p>"},{"location":"video/smoothie/frameserver/#6-install-dokan","title":"6. Install Dokan","text":"<p>It'll install the dokan library which it uses to make virtual files,  you do not need to install the optional development plugins.</p> <p></p>"},{"location":"video/smoothie/frameserver/#7-choosing-a-render-template","title":"7. Choosing a render template","text":"<p>In VEGAS you'll have to choose an audio bitrate</p> <p></p> <p>VEGAS defaults to 48kHz (CTRL+ENTER to open Project Settings  -&gt; Audio tab)</p>"},{"location":"video/smoothie/frameserver/#8-configuring-debugmode-frameserver","title":"8. Configuring Debugmode Frameserver","text":"<p>You'll need to build up a command, here's what you need to know to assemble it</p> <p>Start it with <code>cmd /k</code> if you want it to stay open after smoothie-rs finishes running (e.g to see the crash message before it crashes)</p> <p>Paste in the path of smoothie-rs.exe, get it by going in smrs' <code>/bin/</code> folder and SHIFT+RIGHT CLICKing <code>smoothie-rs.exe</code> and clicking <code>Copy as path</code></p> <p>If the terminal closes before you can see an error if one occurs, or if you're doing it for the first time, consider adding the following at the start of your command: <pre><code>cmd /k\n</code></pre></p> <p>You'll need to go in smoothie-rs' <code>/bin/</code> folder and shift-right click <code>smoothie-rs.exe</code> -&gt; Copy as path and paste it in</p> <p>For blur you should be able to find <code>blur-cli.exe</code> (or if you got older versions just <code>blur.exe</code>) <code>C:\\Program files (x86)\\blur</code></p> <p>You'll need to add the following arguments after:</p> <pre><code>-i \"%~1\"\n</code></pre> <p>You should find the output files in <code>C:\\CCFS\\virtual</code>, consider making a shortcut to it on your desktop/start menu</p> <p></p> <p>Here's some examples:</p> <p><pre><code>cmd /k \"D:\\smrs\\bin\\smoothie-rs.exe\" -i \"%~1\"\n</code></pre> <pre><code>\"C:\\Program Files (x86)\\blur\\blur-cli.exe\" -i \"%~1\"\n</code></pre></p>"},{"location":"video/smoothie/installation/","title":"Installing Smoothie","text":""},{"location":"video/smoothie/installation/#dependencies","title":"Dependencies","text":"<ul> <li>FFmpeg, must be present in PATH, see a manual install guide here<ul> <li>Smoothie also makes uses ffprobe and ffplay, which should be included with your install</li> </ul> </li> </ul> <ul> <li>Video files to use it with (1)</li> </ul> <ol> <li>This may sound obviously dumb, but you can't imagine the amount of kids asking on Discord \"can it blur my desktop\" thinking it was an os-wide filter.</li> </ol> VapourSynth dependencies <p>Note: These are bundled with the .ZIP provided for Windows users, read below this spoiler</p> <ul> <li>VapourSynth Classic</li> <li>Python 3.10.9</li> </ul> <p>plugins:</p> <ul> <li>ffms2: source plugin</li> <li>lsmash: another source plugin</li> <li>vs-akarin: used for frameblending</li> <li>mvtools: used for flowblur</li> <li>svpflow: used for interpolation</li> <li>RIFE NCNN Vulkan: used for pre-interp</li> <li>fmtc: format converter</li> <li>timecube: lut</li> </ul> <p>scripts:</p> <ul> <li>adjust: for color grading, i don't know who made it</li> <li>filldrops: for frame deduplication, idk either</li> <li>havsfunc: used to change fps and interpolate, maintained here</li> </ul> WindowsLinux <p>Smoothie comes in a portable zip file(1), get it here.</p> <ol> <li>A portable program means it doesn't come with an installer, you just unzip and run it. Upsides is it's easy to uninstall (just delete the folder lol) but downsides is you gotta make shortcuts to it yourself</li> </ol> <p>Extract the <code>smoothie-rs</code> folder somewhere, then in it you can use <code>launch.cmd</code> to launch it in it's GUI mode</p>"},{"location":"video/smoothie/installation/#making-a-send-to-shortcut-and-rife-models","title":"Making a Send To shortcut and RIFE models","text":"<p>Unzip it wherever you'd like, in the bin folder get <code>smoothie-rs.exe</code>'s PATH by SHIFT+Right clicking it and \"Copy Path\"</p> <p>In <code>%APPDATA%\\Microsoft\\Windows\\SendTo</code> make a shortcut to  with add a space and <code>--tui -i</code> <p>If Smoothie is crashing on you can add the <code>-v</code> argument (that'd be <code>-v --tui -i</code>) after the smoothie-rs executable's path to enable verbose logging to see what's wrong</p> <p>Video tutorial:</p> <p></p> <p>todo, cargo should be able to compile it</p> <p>for arch nerds see the dependencies of https://aur.archlinux.org/packages/teres * you'll also need https://aur.archlinux.org/packages/vapoursynth-plugin-vsakarin-git for frame blending * and https://aur.archlinux.org/packages/vapoursynth-plugin-rife-ncnn-vulkan-git for pre-interp</p>"},{"location":"video/smoothie/recipe/","title":"Smoothie recipe","text":"<p>The recipe (config file) is Smoothie's hardest part of it's learning curve, reading this and messing around with short clips is the best way to familiarize yourself with it. </p> <p>The values which can be turned on or off (booleans) have a bunch of aliases for convenience, I advise typing y/n or 1/0 for short</p> <p>If there are some feature you're not interested in using, feel free to remove them from the file, it won't break a thing and act like you disabled it(1)</p> <ol> <li>Smoothie loads <code>defaults.ini</code> into a hashmap, which is just like the user's <code>recipe.ini</code> but with everything disabled / max compatibility, then it overrides the values in that hasmap that exist with <code>recipe.ini</code> / whatever specified ini file</li> </ol> <p></p> <p>Here's what each file is for:</p> <ul> <li><code>recipe.ini</code></li> </ul> This is the default config file used which you are supposed to edit. <ul> <li><code>defaults.ini</code></li> </ul> Backup of all existing settings, it is loaded first then overwrote by <code>recipe.ini</code>, this makes it so you're able to remove unused. <ul> <li><code>encoding_presets.ini</code></li> </ul> Preset=value config file for encoding <ul> <li><code>jamba.vpy</code></li> </ul> The VapourSynth script Smoothie uses, you can read how each config value is used. Having it out here means nothing prevents you from installing extra plugins in <code>/bin/vapoursynth64/plugins/</code> and wiring your own recipe ingredients. Though there are some hardcoded recipe checks"},{"location":"video/smoothie/recipe/#frame-blending","title":"frame blending","text":"<p>Just like blur's \"blur\" config category, VEGAS' smart resampling and FFmpeg's <code>tmix</code> filter but much faster, this averages every frame with it's neighboring frames, creating trails and if done correctly looks like realistic motion-blur.</p> <p>This is almost always done on only on a fourth / eight ect.. of the frames and intended to be viewed at conventional frame rates</p> <p>On the left is a 240FPS, and on the right a 60FPS video with frame blending, this is not a pretty example but that shows you how the frames actually end up squished in a lower FPS</p> <p>Using velocity on frame-blended footage in video-editors</p> <p>If you like running your clips through Smoothie before editing them, you can tweak the aforementioned settings like so:</p> <p>Setting the <code>fps</code>to 120, 180 or higher depending on how so you wanna go</p> <p>And most importantly raising the <code>blur intensity</code> to 2.5 or even higher depending on your taste</p> <code>enabled</code>: yes <p>Whether or not you wish to enable this setting, if disabled the rest of this category does not matter</p> <code>fps</code>: 60 <p>Output framerate to cap to, this does not affect how the frame blending is applied in the code</p> <code>intensity</code>: 1.0 <p>Multilied factor of how much frame blending weights to apply is calculated by diving the input FPS (or interpolated if configured) by the output FPS, e.g (240/60)*1.0 = 4, this is identical to blur's <code>blur amount</code></p> <code>weighting</code>: equal <p>Opacity curve of each weight, you can make them manually <code>[1.0, 1.0, 1.0, 1.0, 1.0]</code> or choose from the available presets:</p> <ul> <li><code>equal</code></li> <li><code>vegas</code></li> <li><code>gaussian</code></li> <li><code>gaussian_sym</code></li> <li><code>ascending</code>: my favorite, i like to pair it with a higher intensity</li> <li><code>descending</code></li> <li><code>pyramid</code>: opacity peaks at the middle</li> <li><code>custom</code>: ill leave the explanation to nerd weighter atzur</li> </ul> <p>Comparison of how <code>equal</code> and <code>ascending</code> look:</p> <p></p> <code>bright blend</code>: no <p>Enablines this slows down rendering. Converts to RGB48 color space before blending, it makes it look akin to Premiere Pro's frame blending (in a good way), I guess it's comparable to blend two images with additive mode</p>"},{"location":"video/smoothie/recipe/#interpolation","title":"interpolation","text":"<p>Motion-estimation tricks to create frames between existing ones, almost if like magically increasing the framerate, this creates imperfect frames which inevitably  have what we call artifacts, e.g smearing on static (HUD / overlays) parts and fast movement can look cursed with low fps input. \"interpolation\" in Smoothie is done with old non-DRM'd builds of SVPFlow also see their wiki</p> <p>Also see pre-interp, a different internal methodology</p> <code>enabled</code>: yes <p>Whether or not you wish to enable this setting, if disabled the rest of this category does not matter</p> <code>masking</code>: yes <p>Whether or not you wish to use artifact masking, note if artifact masking is disabled in it's category it'll be considered off</p> <code>fps</code>: 960 <p>Frame rate you want to interpolate to</p> <code>speed</code>: medium <p>Defines the accuracy of the interpolation calculations, affecting the rendering speed in the process, available values:</p> <ul> <li><code>medium</code></li> <li><code>fast</code></li> <li><code>faster</code></li> <li><code>fastest</code></li> </ul> <code>tuning</code>: weak <p>Adapted from InterFrame2's docs: Tunes the settings for the type of content.</p> <ul> <li>Film - This offers a good balance between the accuracy of individual moving things and the cohesiveness of the frame.</li> <li>Animation - I've never seen it used for gameplay, </li> <li>Smooth - This increases the accuracy of individual moving things while decreasing the cohesiveness of the frame.</li> <li>Weak - This decreases the accuracy of individual moving things while increasing the cohesiveness of the frame.<ul> <li>Note: This will weaken the interpolation a lot, meaning the motion isn't as smooth.</li> </ul> </li> </ul> <p>Most people prefer weak, some like film for low fps input</p> <code>algorithm</code>: 23 <p>Taken from same docs, sets the algorithm.</p> <ul> <li>2 - This makes strong predictions which can be useful for cartoons but can also leave big artifacts</li> <li>13 - This is the most intelligent algorithm since it masks many artifacts, but it is not as smooth as 23</li> <li>23 - This is the smoothest algorithm, but it does not have the artifact masking that 13 has</li> </ul> <p>Most people use 23 / 13</p> <code>use gpu</code>: no <p>This is turned off by default for compatibility but I suggest turning it on, IF2 docs:</p> <p>Whether or not to use GPU (video card) alongside CPU to accelerate conversion and improve quality.</p> <p>Note: This mode may run slower. This is because while it is doing calculations much faster, it is also doing more complicated calculations to improve quality.</p>"},{"location":"video/smoothie/recipe/#flowblur","title":"flowblur","text":"<p>Most easily comparable to Reel Smart Motion blur (RSMB), like interpolation it also causes artifacts.</p> <code>enabled</code>: no <p>Whether or not you wish to enable this setting, if disabled the rest of this category does not matter</p> <code>masking</code>: yes <p>Whether or not you wish to use artifact masking, note if artifact masking is disabled in it's category it'll be considered off</p> <code>intensity</code>: 100 <p>Strengh of the blur, 0 is nothing and 200 is the max</p> <code>do blending</code>: after <p>In which order to do frame blending and Flowblur: * <code>after</code>: slower, frame blending is done AFTER applying Flowblur, to use if you wish to replicate Freeman's Mind motion blur * <code>before</code>: faster &amp; most similar to RSMB, frame blending is done BEFORE applying Flowblur</p>"},{"location":"video/smoothie/recipe/#output","title":"output","text":"<p>If you wish to disable output to test render speed without being slowed down by encoding, use <code>--tonull</code></p> <code>process</code>: ffmpeg <p>File path to the FFmpeg executable, it defaults to just trying to call it from PATH, if you configure it's other arguments you could use any other CLI encoder that accepts YUV4MPEG input from STDIN</p> <code>enc args</code>: H264 CPU <p>FFmpeg CLI encoding arguments, for convenience you can use the presets which are all stored in encoding_presets.ini, </p> <p>if you didn't understand what any of this means give Which codec should I use? a read.</p> <p>Adding <code>4K</code> will expand to the arguments necessary to (up)scale to 4K</p> <code>container</code>: MP4 <p>Video container format, defaults to MP4</p> <p>To contain the UTVideo codec you'll need to switch to AVI or MKV. </p> <p>You can use Matroska (MKV) to be able to read what's already been rendered of the video before it finished rendering</p> <code>file format</code>: %FILENAME% ~ %FRUIT% %OUTPUT_FPS% <p>Output filename formatting, not used if <code>-o</code> / <code>--output</code> is already specified</p> <ul> <li> <p>%FILENAME% is the output file base name (without the extension)</p> </li> <li> <p>%FRUIT% will expand to a random fruit from this list \ud83d\ude0b</p> </li> <li> <p>Other values of the recipe can be used, see how it's implemented here</p> </li> </ul>"},{"location":"video/smoothie/recipe/#preview-window","title":"preview window","text":"<p>Makes FFmpeg output the video to a second stream, piped to ffplay, an video player which is almost always shipped alongside ffmpeg.</p> <p>It can be closed off without crashing, it's just got some ignore file you can safely ignore.</p> <code>enabled</code>: no <p>Whether or not you wish to enable this setting, if disabled the rest of this category does not matter</p> <code>process</code>: ffplay <p>File path of executable to pipe to, if you use mpv render speed will max out at real-time (1.0x) </p> <code>output args</code>: -f yuv4mpegpipe - <p>Additional arguments to append to ffmpeg's arguments to create a second output stream</p>"},{"location":"video/smoothie/recipe/#artifact-masking","title":"artifact masking","text":"<p>When using pre-interpolation, interpolation or flowblur you have the choice to not apply any of these effects on specific regions of the video with artifact masks, they're images with black and white regions and the black regions revert the effect it's applied on (remember all these <code>masking: yes</code> values? That's how you individually toggle masking)</p> <p>They're resolution specific, smoothie will crash if you pair 1280x720 videos with 1920x1080 masks</p> <code>enabled</code>: no <p>Globally toggle artifact masking, if disabled the rest of this category does not matter</p> <code>feathering</code>: yes <p>If you have colors between white and black (e.g doing grey gradients) turn this on to support this, the darker the pixel color the lower the effect's opacity.</p> <code>folder path</code>: empty by default, example: D:\\smrs\\masks\\ <p>Path to the folder where you wish to store your artifact masking images, you can easily get it by shift-right clicking that folder -&gt; Copy as path</p> <code>file name</code>: empty by default, example: overwatch.png <p>The name of the mask image file to use</p>"},{"location":"video/smoothie/recipe/#miscellaneous","title":"miscellaneous","text":"<code>play ding</code>: no <p>Supposed to play <code>C:\\Windows\\Media\\ding.wav</code> with ffplay once Smoothie is done rendering, still not yet implemented from smoothie-py</p> <code>always verbose</code>: no <p>Equivalent to if you always passed <code>--verbose</code> to the arguments (though recipe parsing verbose stuff won't be logged since it hasn't reached the point to where it parses the recipe to enable verbosity)</p> <code>dedup threshold</code>: 0.0 <p>Rarely used because heard to measure, it's a plugin which tries to guess which frames are duplicated due to encoding lag and replaces them by interpolated ones </p> <code>global output folder</code>: <p>By default Smoothie outputs to the same directory as the input file with <code>[output] file format:</code></p> <code>source indexing</code>: no <p>Index the input clips, making a cache in %TEMP%, this is useful to enable if you are rendering a clip multiple times</p> <code>ffmpeg options</code>: -loglevel error -i - -hide_banner -stats -stats_period 0.15 <p>Arguments first passed to ffmpeg </p> <code>ffplay options</code>: -loglevel quiet -i - -autoexit -window_title smoothie.preview <p>Arguments first passed to ffplay when the preview window is enabled</p>"},{"location":"video/smoothie/recipe/#console","title":"console","text":"<p>On Windows you can customize the terminal window's behavior (Meant to be used with <code>conhost.exe</code>, they switched to the default to the fancier Windows Terminal on Windows 11)</p> <p>Windows Terminal does not behave well with this</p> <code>stay on top</code>: no <p>Make the window stay on top, can still be minimized</p> <code>borderless</code>: yes <p>Hide the window title bar, you can't move the window but can still minimize it by clicking the window from the taskbanr</p> <code>position</code>: top left <p>Move the taskbar to a corner of your main display</p> <code>width</code>: 900 <code>height</code>: 350 <p>Dimensions of the window</p>"},{"location":"video/smoothie/recipe/#timescale","title":"timescale","text":"<code>in</code>: 1.0 <p>Input speed, e.g if your input clip was recorded at 10% of it's speed you can speed it 10x by typing 0.1 <code>out</code>: 1.0</p> <p>Output speed, e.g if you wanna speed it up a bit you can do a lil' 1.03 \ud83d\ude3c</p>"},{"location":"video/smoothie/recipe/#color-grading","title":"color grading","text":"<code>enabled</code>: no <p>Whether or not you wish to enable this setting, if disabled the rest of this category does not matter</p> <p><code>brightness</code>: 1.0 <code>saturation</code>: 1.0 <code>contrast</code>: 1.0</p>"},{"location":"video/smoothie/recipe/#LUT","title":"LUT","text":"<p>Look up table filter, they're kinda like color filters to make colors exactly accurate to a standard, but we nerd mostly use it for cool color grades :)</p> <code>enabled</code>: no <p>Whether or not you wish to enable this setting, if disabled the rest of this category does not matter</p> <code>path</code>:  <p>Full file path to the LUT filter, (.cube)</p> <code>opacity</code>: 0.20 <p>Opacity of the filter</p>"},{"location":"video/smoothie/recipe/#pre-interp","title":"pre-interp","text":"<p>Pre-interpolation uses RIFE NCNN Vulkan to do interpolation, in the filter chain it's applied before interpolation hence the term \"pre-\"</p> <p>It's very slow to use, see how to get them here</p> <p>NCNN is used instead of RIFE for the much smaller dependencies (CUDA is like 5GB \u00b0O\u00b0, blur used to have an option for it, never managed to get it working)</p> <p>Some color formats fail to convert and make pre-interp crash</p> <p>Depending on how you configure your colors in  OBS-Alt-2  OBS' Advanced settings tab,</p> <p>Pre-interp may not work with them, it's currently an open issue on the repository</p> <p>I invite you to try fiddling around until you see what works, sRGB space &amp; Limited range works for me</p> <code>enabled</code>: no <p>Whether or not you wish to enable this setting, if disabled the rest of this category does not matter</p> <code>masking</code>: n <p>Whether or not you wish to use artifact masking, note if artifact masking is disabled in it's category it'll be considered off</p> <code>factor</code>: 3x <p>How much you wish to multiply the input FPS by and interpolate to that, e.g if the video's input fps is 60 and the factor is 3: 60 x 3 = it'll interpolate 180fps</p> <code>model</code>: rife-v4.4 <p>Path to the RIFE model folder, they do not ship with Smoothie, see a video tutorial here</p> <p>You can download a pack of them here (~400MB):</p> <p>https://github.com/nihui/rife-ncnn-vulkan/releases</p> <p>And some more recent ones there, individual links (~20MB/model):</p> <p>https://github.com/hzwer/Practical-RIFE#model-list</p> <p>Then extract and move each individual foldfers in /rife models/ </p> <p>RIFE Models don't come included with Smoothie because:     * Licensing     * Size, not everyone uses them     * They're not that hard to download, unzip and place in /models/</p>"},{"location":"video/smoothie/recipe/#using-multiple-recipe-files","title":"Using multiple recipe files","text":"<ol> <li>Make a copy of <code>recipe.ini</code> and name it something else</li> <li>Make a copy of the shortcut you use Smoothie with</li> <li>Add <code>--recipe name.ini</code> to the arguments (for Send To shortcuts make sure it's before <code>-i</code>, that one must be the last)</li> </ol>"},{"location":"video/smoothie/smoothievsblur/","title":"Smoothie vs. blur","text":""},{"location":"video/smoothie/smoothievsblur/#which-is-bettershould-i-use","title":"Which is better/should I use?","text":"<p>blur and Smoothie are very similar under the hood, both use VapourSynth with the same or if not very similar plugins, this page lists all the differences you'll encounter so you can make up your mind.</p> <p>This page is intended for existing blur users</p> <p>This explains the design choices I've taken while inspiring myself from blur during Smoothie's development, if you've never got familiar with it before there's little use in reading the rest of this page (except if you're trying to make a recipe look identical to a blur config)</p>"},{"location":"video/smoothie/smoothievsblur/#smoothie-pros","title":"Smoothie pros","text":"<ul> <li> <p>Smoothie recipe values are optional</p> </li> <li> <p>Smoothie has a much smoother preview window using ffplay.</p> </li> <li> <p>Smoothie has artifact masking</p> </li> <li> <p>Smoothie has flowblur</p> </li> <li> <p>Smoothie has RIFE (pre)interpolation, it's not in blur since beta v1.92</p> </li> <li> <p>A plethora of CLI arguments</p> </li> </ul>"},{"location":"video/smoothie/smoothievsblur/#blur-pros","title":"blur pros","text":"<ul> <li> <p>Percentage progress and a drag-and drop queue system, I prefered making a file picker for Smoothie</p> </li> <li> <p>Global / per folder config system</p> </li> </ul>"},{"location":"video/smoothie/smoothievsblur/#terms-used","title":"Terms used","text":"<ul> <li> <p>blur's config has a category named <code>- blur</code> which I consider to be redundant, it's been renamed to a more comprehensive <code>[frame blending]</code></p> </li> <li> <p>the <code>blur amount</code> value in previously mentioned category has also been renamed to <code>intensity</code>, I'm looking for a better term than that, lmk \ud83d\udc41\ud83d\udc41</p> </li> </ul>"},{"location":"video/smoothie/smoothievsblur/#features-backported-to-blur","title":"Features backported to blur","text":"<p>since beta v1.92 a lot of the features that made smoothie different</p> <ul> <li> <p>Frame blending is faster on Smoothie tekno copied over the code</p> </li> <li> <p>Smoothie has a non-harcoded vpy script to modify, blur appends hard coded python code to a temp file</p> </li> <li> <p>Smoothie has one global config, blur looks if there's a config in the same dir as the input files in blur v1.92 he added a global config option if none were found in dir, I should copy that too \ud83d\ude0b</p> </li> </ul>"},{"location":"video/smoothie/smoothievsblur/#lore","title":"Lore","text":"<p>blur, smoothie &amp; teres all make use of these two programs:</p> <ul> <li>VapourSynth is a video filtering library with a Python scripting front-end</li> <li> <p>FFmpeg is used to package VSPipe's uncompressed Y4M stream into encoded videos</p> </li> <li> <p>June 2020: blur got created on GitHub</p> </li> <li> <p>January 2022: blur was dormant since v1.8, I made a fork of blur named smoothie in Python  </p> </li> <li> <p>Feburary 2022: another developer named anima rewrote blur in Rust</p> </li> <li> <p>January 2023: Seeing teres I made smoothie-rs, deprecating the original smoothie being now called smoothie-py</p> </li> </ul> <p>Today blur's new beta makes it's internals more similar to Smoothie than teres</p> <p>teres' main advantage is that it's available in the Arch user repository</p>"},{"location":"video/smoothie/troubleshooting/","title":"Troubleshooting","text":"<p>Here are some common problems and their solutions:</p>"},{"location":"video/smoothie/troubleshooting/#ffmpeg-not-found","title":"<code>ffmpeg.exe is not installed/in PATH, ensure FFmpeg is installed</code>","text":"You need ffmpeg, see it's dependencies"},{"location":"video/smoothie/troubleshooting/#smoothie-instant-crash","title":"<code>*Smoothie crashing before any error can be read*</code>","text":"Run Smoothie by using <code>launch.cmd</code> and select your video. Smoothie will now stay open and you can read the error.If there's no error message, it's likely a problem with your Send to shortcut."},{"location":"video/smoothie/troubleshooting/#recipe-parse-error","title":"<code>Smoothie Recipe parser: setting xyz has no parent category</code>","text":"Double check the syntax of your recipe config file. Make sure you're not using the config from the old smoothie-py or blur."},{"location":"video/smoothie/troubleshooting/#no-valid-videos","title":"<code>No valid videos were passed to smoothie</code>","text":"It means all of the input files it's gone through were not valid video files, ensure they're not corrupted / empty (0 bytes)"},{"location":"video/smoothie/troubleshooting/#invalid-yuv4mpeg-pixel-format","title":"<code>'X' is not an official yuv4mpegpipe pixel format</code>","text":"Your video is recorded in a color format that is unsuppored by SVPFlow (interpolation algorithm). Convert your video to a supported color format (NV12) or don't use interpolation (or use pre-interp instead)."},{"location":"video/smoothie/troubleshooting/#resize-error","title":"<code>VapourSynth Resize error 3074: no path between colorspaces (2/2/2 =&gt; 0/2/2)</code>","text":"This is due to some incompatible color convertion with your video during RIFE pre-interp, try changing your OBS' advanced color settings and see what works."},{"location":"video/smoothie/troubleshooting/#nvenc-driver-version-error","title":"<code>FFmpeg encoding error: Driver does not support the required nvenc API version.</code>","text":"Update your Nvidia GPU drivers or use others encoding arguments like H264/5 CPU, or UTVideo"},{"location":"video/smoothie/troubleshooting/#source-index-mismatch","title":"<code>Python exception: Source: The index does not match the source file</code>","text":"Ensure your video path doesn't have any non-english, special characters. The name of your file might be the problem, try renaming it. If it persists please make a support post on our Discord or contact me"},{"location":"video/smoothie/troubleshooting/#warning-failed-to-load-smoothie-rsbinvapoursynth64pluginslibrifedll-getlasterror-returned-126-the-file-you-tried-to-load-or-one-of-its-dependencies-is-probably-missing","title":"<code>Warning: Failed to load [...]\\smoothie-rs\\bin\\vapoursynth64\\plugins\\librife.dll. GetLastError() returned 126. The file you tried to load or one of its dependencies is probably missing.</code>","text":"You're running this in a VM or do not have vulkan libraries installed. <p>shout out z1xus and gemstorm for the base of most o this page</p>"},{"location":"video/smoothie/usecases/","title":"Use case examples","text":"<p>Smoothie is a real swiss army knife when you know all of it's tricks, I'll list all the actual use cases I've seen Smoothie be a great alternative for</p>"},{"location":"video/smoothie/usecases/#high-fps-vegas-pro-editing","title":"High-FPS VEGAS Pro editing","text":"<p>(This could be applied to Premiere Pro as well, though it has much faster pre-render/proxy capabilities, but objectively worse looking frame blending)</p> <p>Let's say I record in 480FPS and like to frameblend &amp; export at 60FPS:</p> <p>Instead of doing:</p> <ul> <li>Record video-game footage in 480FPS with OBS</li> <li>Import footage in VEGAS Pro</li> <li>Edit the footage with preview lag running at 5~15 FPS tops</li> <li>Export with smart resampling (slow)</li> <li>Need to export again? Gotta also resample everything AGAIN</li> </ul> <p>Consider:</p> <ul> <li>Record video-game footage in 480FPS with OBS</li> <li>Use Smoothie with frameblending on all clips (e.g 60fps out)</li> <li>Import footage in VEGAS Pro</li> <li>Edit the footage with way less preview lag</li> <li>Export at the same framerate as your clips (no smart resampling thus fast)</li> </ul> <p>The only downside is that if you use something like velocity / slow downs it'll look choppy, but nothing prevents you from replacing that particular part with the original 480FPS clip</p>"},{"location":"video/smoothie/usecases/#flowframes-for-60fps-interp-then-frame-blending","title":"Flowframes (for 60+fps interp then frame blending)","text":"<p>e.g in the context of gpu-intensive tasks like recording Apex Legends gameplay</p> <p>Instead of doing:</p> <ul> <li>Record video-game footage in 180FPS with OBS</li> <li>Interpolate each video file sequentially with Flowframes and exporting in PNG sequence</li> <li>Account for the temp storage it's gonna take from extracting video files into raw frames and the output folder</li> <li>Open VEGAS and import as PNG sequence</li> <li>Export with frame resampling</li> </ul> <p>Consider:</p> <ul> <li>Record video-game footage in 180FPS with OBS</li> <li>Queue all videos to Smoothie configured to pre-interpolate (RIFE) and frameblend</li> <li>..thats it.</li> </ul> <p>enjoy ur smooth frags :)</p>"},{"location":"video/smoothie/usecases/#doing-render-tests","title":"Doing render tests","text":"<p>For my fellow <code>#video-dicussion</code> frogs :)</p> <p>Instead of doing:</p> <ul> <li>Record video-game footage in 480FPS with OBS</li> <li>Import footage in VEGAS Pro</li> <li>Add your color grading settings &amp; LUT file</li> <li>Export with MAGIX at 240M bitrate</li> <li>Move output video file to your upscale folder</li> <li>Rename it to input.mp4</li> <li>Sort out the previous video files you had left in the upscale folder</li> <li>Run upscale.bat</li> <li>Upload to YouTube</li> </ul> <p>Consider:</p> <ul> <li>Record video-game footage in 480FPS with OBS</li> <li>Configure Smoothie like so:<ul> <li>Add your favorite LUT / configure the color grading</li> <li>Turn on frame blending </li> </ul> </li> <li>Run Smoothie</li> <li>Share  directly to Discord or to fileditch.com</li> </ul>"}]}